@using IValidator = System.Web.WebPages.IValidator;
@functions {
    public static ValidationHelper Validation {
        get {
            WebPage page = CurrentPage as WebPage;
            return page == null ? null : page.Validation;
        }
    }
}

@* Templated Helpers (infrastructure for the real controls below) *@
@helper Control(string title, string name, bool validation, Func<object, HelperResult> template, string helpText = null) {
    string binding = validation ? " data-bind=\"css: { error: !" + name + ".isValid() }\"" : String.Empty;
    <li class="control-group"@Html.Raw(binding)>
        <label class="control-label" for="@name">@title</label>
        <div class="controls">
            @template(null)
            @if(!String.IsNullOrEmpty(helpText)) {
                <p class="help-block">@helpText</p>
            }
            @if(validation) {
                <p class="help-block" data-bind="ifnot: @(name).isValid, text: @(name).errorMessage"></p>
            }
        </div>
    </li>
}

@helper Input(string title, string name, string type, bool validation, string helpText = null)
{
    @Input(title, name, type, "value", validation, helpText)
}

@helper Input(string title, string name, string type, string valueBinding, bool validation, string helpText = null)
{
    @Control(title, name, validation, @<input type="@type" name="@name" data-bind="@valueBinding: @name" />, helpText)
}

@* Actual Controls *@

@helper Textarea(string title, string name, bool validation = true, string helpText = null)
{
    @Control(title, name, validation, @<textarea name="@name" data-bind="value: @name"></textarea>, helpText)
}
@helper Text(string title, string name, bool validation = true, string helpText = null) { @Input(title, name, "text", validation, helpText) }
@helper Email(string title, string name, bool validation = true, string helpText = null) { @Input(title, name, "email", validation, helpText) }
@helper Password(string title, string name, bool validation = true, string helpText = null) { @Input(title, name, "password", validation, helpText) }
@helper Checkbox(string title, string name, bool validation = true, string helpText = null) { @Input(title, name, "checkbox", "checked", validation, helpText) }